---
- name: Include {{ redmine_sql_driver }}-specific dependencies
  include_vars: "{{ redmine_sql_driver }}.yml"

# Split playbook with Ruby and Redmmine bug -
# https://github.com/ansible/ansible/issues/27520
# TODO: TCP Socket with unicorn

# Some Docker images such as CentOS do not have `which`
# ruby gems like rmagick require `which`
# ImageMagick.* is required for rmagick
- name: Package dependencies from distribution
  yum:
    state: installed
    name:
      - ruby-devel
      - ImageMagick
      - ImageMagick-devel
      - ImageMagick-c++-devel
      - gcc
      - patch
      - epel-release
      - which
      - "{{ _sql_driver_dependencies }}"

- name: Ensure Nginx is installed
  yum:
    state: installed
    name: nginx
  when: redmine_configure_nginx

- name: Ensure Nginx server is enabled and started
  service:
    name: nginx
    state: started
    enabled: true
  when: redmine_configure_nginx

- name: Redmine user
  user:
    name: redmine

- name: Check whether Redmine is already downloaded
  stat:
    path: "{{ redmine_runtime_directory }}/appveyor.yml"
  register: redmine_cat

- name: Download Redmine
  get_url:
    url=http://www.redmine.org/releases/redmine-{{ redmine_version }}.tar.gz
    dest=/home/redmine/
  become: true
  become_user: redmine
  when: not redmine_cat.stat.exists

- name: Ensure redmine runtime directory exists
  file:
    path: "{{ redmine_runtime_directory }}"
    state: directory
    owner: redmine
    group: redmine
  when: not redmine_cat.stat.exists

# First we create the fcontext before files are created in the directory
# When the files are created they automatically have the right context
# If you alraedy have the file, relabel them using the command:
# restorecon -Rv /home/redmine/redmine/public
# see https://groups.google.com/forum/#!topic/ansible-project/IcgnAekwsbA
# about the intended behaviour of sefcontext
# This ideal setup is not working yet
# the parent directory probably has to have the same context for this to work
# For now use restorecon
# TODO probably change redmine path to /sr/redmine instead of /home/redmine/redmine
- name: Allow Nginx to read redmine content
  sefcontext:
    target: '/home/redmine/redmine/public(/.*)?'
    setype: httpd_sys_content_t
    state: present
  when: redmine_configure_selinux

  # Ansible has a bug because of which you can't extract to destination directly via unarchive
  #  https://github.com/ansible/ansible-modules-core/issues/2480
  #  extra_opts: ['--strip-components=1'] also doesn't work
- name: Unpack Redmine source tarball
  unarchive:
    src: /home/redmine/redmine-{{ redmine_version }}.tar.gz
    dest: /home/redmine/
    copy: false
  become: true
  become_user: redmine
  when: not redmine_cat.stat.exists

- name: Copy Redmine source files to runtime directory
  shell: "cp -a /home/redmine/redmine-{{ redmine_version }}/* {{ redmine_runtime_directory }}"
  become: true
  become_user: redmine
  when: not redmine_cat.stat.exists

- name: Install bundler
  gem:
    name: bundler
    state: present
    user_install: true
    version: "{{ redmine_bundler_version }}"
    env_shebang: true
  become: true
  become_user: redmine

- name: Redmine database configuration file
  template:
    src: database.yml
    dest: "{{ redmine_runtime_directory }}/config/"
  become: true
  become_user: redmine

- name: Redmine configuration file
  template:
    src: home/redmine/redmine/config/configuration.yml.j2
    dest: "{{ redmine_runtime_directory }}/config/configuration.yml"
  become: true
  become_user: redmine
  when: redmine_additional_configuration

- name: Local gemfile
  template:
    src: Gemfile.local
    dest: "{{ redmine_runtime_directory }}"
  become: true
  become_user: redmine

- name: Install the local gems via bundler
  bundler:
    executable: /home/redmine/bin/bundler
    gemfile: "{{ redmine_runtime_directory }}/Gemfile.local"
    chdir: "{{ redmine_runtime_directory }}"
  become: true
  become_user: redmine

- name: Install the gems needed by Redmine via bundler
  bundler:
    executable: /home/redmine/bin/bundler
    gemfile: "{{ redmine_runtime_directory }}/Gemfile"
    chdir: "{{ redmine_runtime_directory }}"
  become: true
  become_user: redmine
  tags:
    - skip_ansible_lint

- name: Stat secret token file
  stat:
    path: "{{ redmine_runtime_directory }}/config/initializers/secret_token.rb"
  register:
    secret_token_stat

- name: Generate secret token
  become: true
  become_user: redmine
  shell: /home/redmine/bin/bundle exec /home/redmine/bin/rake generate_secret_token
  args:
    chdir: "{{ redmine_runtime_directory }}"
  when: not secret_token_stat.stat.exists
  tags:
    - skip_ansible_lint

- name: DB Migrate
  environment:
    RAILS_ENV: production
  shell: /home/redmine/bin/bundle exec /home/redmine/bin/rake db:migrate
  args:
    creates: "/home/redmine/.ansible-creates-db-migrate"
    chdir: "{{ redmine_runtime_directory }}"
  become: true
  become_user: redmine
  register:
    db_migrate
  notify:
    - creates db migration
  tags:
    - skip_ansible_lint

- name: Show db_migrate
  debug:
    msg: "{{ db_migrate }}"
    verbosity: 3

- name: Directories for shared resources
  file:
    path: "{{ redmine_runtime_directory }}/shared/{{ item }}"
    state: directory
  with_items:
    - config/redmine
    - log/redmine
    - pid/redmine
    - socket/redmine
  become: true
  become_user: redmine

- name: Unicorn configuration
  template:
    src: unicorn.conf.rb
    dest: "{{ redmine_runtime_directory }}/shared/config/redmine/"
  become: true
  become_user: redmine

- name: Systemd script
  template:
    src: usr/lib/systemd/system/redmine.service
    dest: /usr/lib/systemd/system/

- name: Ensure temp, log and other Redmine directories exist
  file:
    path: "{{ redmine_runtime_directory }}/{{ item }}"
    state: directory
    owner: redmine
    group: redmine
    mode: 0755
  with_items:
    - "tmp/pdf"
    - "public/plugin_assets"
    - "files"
    - "log"

- name: Populate default data
  shell: /home/redmine/bin/bundle exec /home/redmine/bin/rake redmine:load_default_data
  become: true
  become_user: redmine
  args:
    chdir: "{{ redmine_runtime_directory }}"
    creates: /home/redmine/.ansible-creates-default-data
  when: redmine_default_data
  notify:
    - creates default data
  tags:
    - skip_ansible_lint
  environment:
    REDMINE_LANG: "{{ redmine_language }}"
    RAILS_ENV: production

- name: Firewall open http and https ports
  firewalld:
    permanent: true
    service: "{{ item }}"
    state: enabled
    zone: public
  with_items:
    - http
    - https
  notify:
    - firewalld restart
  when: redmine_configure_firewalld

- name: Permissions for Nginx to read Redmine files
  file:
    path: "{{ item }}"
    recurse: false
    mode: o+x
  with_items:
    - /home
    - /home/redmine
    - "{{ redmine_runtime_directory }}"
  when: redmine_configure_nginx

- name: Nginx configuration plain
  template:
    src: redmine.conf
    dest: /etc/nginx/conf.d/
  notify:
    - nginx restart
  when:
    - redmine_configure_nginx
    - redmine_nginx_config_template == "plain"

- name: Nginx configuration TLS
  template:
    src: etc/nginx/conf.d/redmine_with_tls.conf
    dest: /etc/nginx/conf.d/redmine.conf
  notify:
    - nginx restart
  when:
    - redmine_configure_nginx
    - redmine_nginx_config_template == "tls"

- name: Nginx configuration custom
  template:
    src: "{{ redmine_nginx_custom_config_path }}"
    dest: /etc/nginx/conf.d/redmine.conf
  notify:
    - nginx restart
  when:
    - redmine_configure_nginx
    - redmine_nginx_config_template == "custom"

- name: Enable redmine systemd unit
  systemd:
    daemon-reload: true
    name: redmine.service
    state: started
    enabled: true

- name: Install Redmine plugins
  include_tasks: install_plugin.yml
  with_items: "{{ redmine_plugins }}"

- name: Configure SELinux policies
  include_tasks: selinux.yml
  when: redmine_configure_selinux
